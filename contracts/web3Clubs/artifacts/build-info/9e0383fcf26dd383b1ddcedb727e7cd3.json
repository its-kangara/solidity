{
	"id": "9e0383fcf26dd383b1ddcedb727e7cd3",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.19",
	"solcLongVersion": "0.8.19+commit.7dd6d404",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/web3Clubs/yacademy.sol": {
				"content": "// // SPDX-License-Identifier: MIT\n// pragma solidity ^0.8.0;\n\n// contract X{\n//     uint public counter;\n//     constructor(){\n//         counter = 0;\n//     }\n//     function increment() public{\n//         counter +=1;\n//     }\n// }\n\n// contract Y{\n//     uint public counter;\n//     constructor(){\n//         counter = 0;\n//     }\n\n//     function increment_1(address contract_X_addr) public{\n//         (bool success, bytes memory data) = contract_X_addr.delegatecall(\n//             abi.encodeWithSignature(\"increment()\"));\n\n//     }\n// function increment_2(address contract_X_addr)public {\n//     (bool success, bytes memory data) = contract_X_addr.call(\n//         abi.encodeWithSignature(\"increment()\"));\n// }\n\n\n// }\n\n\n// contract someNFT is ERC721{\n//     mapping (uint256 => address) ownerOf;\n//     mapping (address => uint256) balanceOf;\n\n//     functionmin\n//  }\n\n// function weDoStuffHere(uint x) public view returns (uints2) {\n// uint8 x;\n// uinti6 y = 1 - x;\n// uint32 z = y + OxFFFF;\n// return z;\n//  }\n\n\n//  contract Example {\n// mapping(address => mapping(address => uint256)) public allowances\n\n// function transferFrom(address owner, address to, uint256 amount) public {\n// uint256 current = allowances[owner][msg.sender];\n// // if there's infinite approval already, just proceed\n// if (current != type(uint256).max) {\n// unchecked {\n// allowances[owner][msg.sender] = current - amount;\n\n \n\n// }\n\n// contract Example {\n// mapping(address => mapping(address => uint256)) public allowances\n\n// function transferFrom(address owner, address to, uint256 amount) public {\n// uint256 current = allowances[owner][msg.sender];\n// // if there's infinite approval already, just proceed\n// if (current != type(uint256).max) {\n// unchecked {\n// allowances[owner][msg.sender] = current - amount;\n\n \n\n// }\n\n// //proceed by allowing msg.sender to transfer\n// //~amount~ from “owner”~ to “to”\n// }"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"errors": [
			{
				"component": "general",
				"errorCode": "3420",
				"formattedMessage": "Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.19;\"\n--> contracts/web3Clubs/yacademy.sol\n\n",
				"message": "Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.19;\"",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "contracts/web3Clubs/yacademy.sol",
					"start": -1
				},
				"type": "Warning"
			}
		],
		"sources": {
			"contracts/web3Clubs/yacademy.sol": {
				"ast": {
					"absolutePath": "contracts/web3Clubs/yacademy.sol",
					"exportedSymbols": {},
					"id": 1,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [],
					"src": "1909:0:0"
				},
				"id": 0
			}
		}
	}
}